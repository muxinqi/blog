{"componentChunkName":"component---src-templates-blog-post-js","path":"/archives/surgio-tutorial/","result":{"data":{"site":{"siteMetadata":{"title":"Mu Xinqi's Blog"}},"markdownRemark":{"id":"c101e5ea-657c-5034-aeca-81f8fa43bfc4","excerpt":"前言 有的时候下载 BitTorrent 会发现被拦截，查看了 Clash 的日志会发现，流量按照分流规则走了机场代理，但是机场是禁止 BT 下载 的，所以需要在 Clash 配置文件中加入一条使 BitTorrent 不走代理（即直连）的规则，但是目前 Clash…","html":"<h2>前言</h2>\n<p>有的时候下载 BitTorrent 会发现被拦截，查看了 Clash 的日志会发现，流量按照分流规则走了机场代理，但是机场是禁止 BT 下载 的，所以需要在 Clash 配置文件中加入一条使 BitTorrent 不走代理（即直连）的规则，但是目前 Clash 的配置文件中<strong>节点</strong>和<strong>规则</strong>以及<strong>配置</strong>是严重耦合在一起的，那么就需要一个工具来帮助我们实现这个需求，研究了一下发现 Surgio 可以胜任。</p>\n<br/>\n<h2>需求</h2>\n<p>现有多个机场订阅以及节点信息：</p>\n<ul>\n<li>Clash(V2Ray)</li>\n<li>Clash(SSR)</li>\n<li>Vmess</li>\n</ul>\n<p>想将其合并成一个 Clash 配置文件，并且自定义一些分流规则。</p>\n<br/>\n<h2>Surgio</h2>\n<p><a href=\"https://surgio.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Surgio</a> 就是一个可以实现（包括但不仅限于）上述需求的好帮手。</p>\n<p>关于 Surgio 的详细介绍，还请看 <a href=\"https://surgio.js.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Surgio官方文档</a> ，文档写的较为全面，对于我这样的小白来说，初次上手确实有些摸不着头脑，网上相关的教程也较少（可能大佬看一看就明白了吧，觉得没啥可以分享的）。</p>\n<p>就这样，反反复复研究了小两天，整理出了以下内容，来解决上述需求。</p>\n<br/>\n<h2>Surgio 环境配置</h2>\n<blockquote>\n<ul>\n<li>以 ’$’ 开头的内容是需要输入至终端的，本教程基于 macOS Catalina 环境，其他平台请参照 <a href=\"https://surgio.js.org/guide/getting-started.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Surgio 快速上手</a></li>\n</ul>\n</blockquote>\n<br/>\n<h3>安装 Node.js</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> node</code></pre></div>\n<p>若提示 <code class=\"language-text\">Command not found &#39;brew&#39;</code>，请安装 <code class=\"language-text\">Homebrew</code>后再次执行该命令安装 <code class=\"language-text\">Node.js</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装 Homebrew</span>\n$ /bin/bash -c <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class=\"token variable\">)</span></span>\"</span></code></pre></div>\n<br/>\n<h3>下载 ssr-local 二进制文件</h3>\n<p>Surgio 导出 SSR 配置时<a href=\"https://surgio.js.org/guide/install-ssr-local.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">需要 ssr-local 的支持</a>，否则后面执行命令时会报错。\n（后期可以通过配置 <code class=\"language-text\">binPath</code> 或者删除冗余的 SSR 导出配置等内容来优化）</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 该命令的作用是下载 ssr-local 到指定位置，并为其添加执行权限。</span>\n$ <span class=\"token function\">curl</span> -L https://github.com/tindy2013/shadowsocks-static-binaries/raw/master/shadowsocksr-libev/macos/ssr-local -o /usr/local/bin/ssr-local <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">chmod</span> +x /usr/local/bin/ssr-local</code></pre></div>\n<br/>\n<h3>安装 Surgio</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 安装</span>\n$ <span class=\"token function\">npm</span> init surgio-store my-rule-store\n\n<span class=\"token comment\"># 或使用国内镜像安装</span>\n$ <span class=\"token function\">npm</span> init surgio-store my-rule-store --use-cnpm\n\n<span class=\"token comment\"># 切换到仓库目录</span>\n$ <span class=\"token builtin class-name\">cd</span> my-rule-store</code></pre></div>\n<p><code class=\"language-text\">my-rule-store</code> 目录如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── node_modules\n├── package-lock.json\n├── package.json\n├── provider\n├── surgio.conf.js\n└── template</code></pre></div>\n<p>当前你只需要关注三个东西，他们的作用大致如下：</p>\n<blockquote>\n<ol>\n<li><code class=\"language-text\">provider</code> - 里面包含你的机场订阅和节点信息</li>\n<li><code class=\"language-text\">template</code> - 里面包含输出文件的格式与配置</li>\n<li><code class=\"language-text\">surgio.conf.js</code> - 里面是你所需要的规则和机场订阅的组合方式等等配置</li>\n</ol>\n</blockquote>\n<br/>\n<h2>添加机场订阅和节点信息</h2>\n<p>第一步，先将多个机场订阅和一些单独的节点添加到 Surgio 中。</p>\n<br/>\n<h3>添加机场订阅</h3>\n<p>进入 provider 文件夹</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> provider</code></pre></div>\n<p>你能看到以下内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── README.md\n├── demo.js\n├── ssr_subscribe_demo.js\n├── subscribe_demo.js\n└── v2ray_subscribe_demo.js</code></pre></div>\n<p>首先对 <code class=\"language-text\">subscribe_demo.js</code> 进行修改，将 <code class=\"language-text\">url</code> 中的内容替换成你的机场订阅。</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">module.exports = {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> url: 'https://gist.githubusercontent.com/geekdada/34353d6ae23abd48f6e200b00747a87e/raw',\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> url: 'https://example.com/clash_v2.yaml',\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> type: 'clash',\n<span class=\"token prefix unchanged\"> </span> // 定义所有的节点都支持 udpRelay\n<span class=\"token prefix unchanged\"> </span> udpRelay: true,\n<span class=\"token prefix unchanged\"> </span> // 添加国旗 emoji\n<span class=\"token prefix unchanged\"> </span> addFlag: true,\n</span>};</code></pre></div>\n<p>如果你有多个机场订阅的话，则根据 <code class=\"language-text\">subscribe_demo.js</code> 格式在当前目录下多创建几个文件，以我上面（两个 Clash 订阅链接）的需求为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 拷贝出一份新的文件</span>\n$ <span class=\"token function\">cp</span> subscribe_demo.js subscribe_demo_1.js</code></pre></div>\n<p>对 <code class=\"language-text\">subscribe_demo_1.js</code> 的内容进行修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">module.exports = {\n<span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span> url: 'https://example.com/clash_v2.yaml',\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> url: 'https://example.com/clash_ssr.yaml',\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> type: 'clash',\n<span class=\"token prefix unchanged\"> </span> // 定义所有的节点都支持 udpRelay\n<span class=\"token prefix unchanged\"> </span> udpRelay: true,\n<span class=\"token prefix unchanged\"> </span> // 添加国旗 emoji\n<span class=\"token prefix unchanged\"> </span> addFlag: true,\n</span>};</code></pre></div>\n<p>这样 <code class=\"language-text\">subscribe_demo.js</code> 和 <code class=\"language-text\">subscribe_demo_1.js</code> 中就分别保存了 Clash(V2Ray)和 Clash(SSR) 的订阅地址。</p>\n<br/>\n<h3>添加节点信息</h3>\n<p>接下来我们在 <code class=\"language-text\">demo.js</code> 中可以看到一些节点信息填写的模板：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'custom'</span><span class=\"token punctuation\">,</span>\n  nodeList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      nodeName<span class=\"token operator\">:</span> <span class=\"token string\">'🇺🇸US'</span><span class=\"token punctuation\">,</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'shadowsocks'</span><span class=\"token punctuation\">,</span>\n      hostname<span class=\"token operator\">:</span> <span class=\"token string\">'us.example.com'</span><span class=\"token punctuation\">,</span>\n      port<span class=\"token operator\">:</span> <span class=\"token string\">'10000'</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'chacha20-ietf-poly1305'</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span>\n      obfs<span class=\"token operator\">:</span> <span class=\"token string\">'tls'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'obfs-host'</span><span class=\"token operator\">:</span> <span class=\"token string\">'gateway-carry.icloud.com'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'udp-relay'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      nodeName<span class=\"token operator\">:</span> <span class=\"token string\">'🇭🇰HK(Netflix)'</span><span class=\"token punctuation\">,</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'shadowsocks'</span><span class=\"token punctuation\">,</span>\n      hostname<span class=\"token operator\">:</span> <span class=\"token string\">'hk.example.com'</span><span class=\"token punctuation\">,</span>\n      port<span class=\"token operator\">:</span> <span class=\"token string\">'10000'</span><span class=\"token punctuation\">,</span>\n      method<span class=\"token operator\">:</span> <span class=\"token string\">'chacha20-ietf-poly1305'</span><span class=\"token punctuation\">,</span>\n      password<span class=\"token operator\">:</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'udp-relay'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>只需稍作修改即可，结构可参考 <a href=\"https://surgio.js.org/guide/custom-provider.html#custom\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档：Provider - custom</a> 。</p>\n<p>到此为止，我们已经将多个机场的订阅信息和一些节点的信息就添加到了 <code class=\"language-text\">Surgio</code> 的配置中。</p>\n<p>接下来添加一些我们所需要的分流规则。</p>\n<br/>\n<h2>配置分流规则</h2>\n<p>在 <a href=\"https://surgio.js.org/guide/custom-config.html#remotesnippets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档</a> 中，我们可以了解到 <code class=\"language-text\">Surgio</code> 支持符合 <a href=\"https://nssurge.zendesk.com/hc/zh-cn/articles/360010038714-Surge-Mac-3-Release-Note\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Surge Ruleset 标准</a>，我们就以添加 <a href=\"https://github.com/Loyalsoldier/surge-rules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">surge-rules</a> 中的 <strong>RULE-SET: 广告域名列表 reject.txt</strong> 规则为例，在生成的 Clash 文件中拦截该规则下的域名。</p>\n<br/>\n<h3>添加规则</h3>\n<p>对 <code class=\"language-text\">my-rule-store</code> 文件夹下的 <code class=\"language-text\">surgio.conf.js</code> 进行修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">module.exports = {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> remoteSnippets: [\n<span class=\"token prefix unchanged\"> </span>   {\n<span class=\"token prefix unchanged\"> </span>     name: 'apple', // 模板中对应 remoteSnippets.apple\n<span class=\"token prefix unchanged\"> </span>     url: 'https://raw.githubusercontent.com/geekdada/surge-list/master/surgio-snippet/apple.tpl',\n<span class=\"token prefix unchanged\"> </span>     surgioSnippet: true\n<span class=\"token prefix unchanged\"> </span>   },\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   // 省略一些规则\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   {\n<span class=\"token prefix unchanged\"> </span>     name: 'paypal', // 模板中对应 remoteSnippets.paypal\n<span class=\"token prefix unchanged\"> </span>     url: 'https://github.com/DivineEngine/Profiles/raw/master/Surge/Ruleset/Extra/PayPal.list'\n<span class=\"token prefix unchanged\"> </span>   },\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   // 添加广告域名列表规则\n<span class=\"token prefix inserted\">+</span>   {\n<span class=\"token prefix inserted\">+</span>     name: 'ad-reject',\n<span class=\"token prefix inserted\">+</span>     url: 'https://raw.githubusercontent.com/Loyalsoldier/surge-rules/release/ruleset/reject.txt'\n<span class=\"token prefix inserted\">+</span>   },\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> ]\n</span>}</code></pre></div>\n<p>好，到此 Surgio 已经知道了该去哪里获取规则，接下来我们需要让 Surgio 知道这些规则该应用在哪里。</p>\n<br/>\n<h3>模板中应用规则</h3>\n<p>进入 <code class=\"language-text\">template</code> 文件夹，对其中的 <code class=\"language-text\">clash.tpl</code> 文件进行编辑：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">rules:\n<span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span> {{ remoteSnippets.ad-reject.main('REJECT') | clash }}\n</span>{{ remoteSnippets.apple.main('🚀 Proxy', '🍎 Apple', '🍎 Apple CDN', 'DIRECT', 'US') | clash }}\n{{ remoteSnippets.netflix.main('🎬 Netflix') | clash }}\n{{ remoteSnippets.hbo.main('🚀 Proxy') | clash }}\n{{ remoteSnippets.hulu.main('🚀 Proxy') | clash }}\n{{ youtube_rules.main('🚀 Proxy') | clash }}\n{{ us_rules.main('US') | clash }}\n{{ remoteSnippets.telegram.main('🚀 Proxy') | clash }}\n{{ blocked_rules.main('🚀 Proxy') | clash }}\n{{ direct_rules.main('DIRECT') | clash }}</code></pre></div>\n<p>在该文件中，我们添加的内容代表，从 <code class=\"language-text\">surgio.conf.js</code> 文件中的 <code class=\"language-text\">remoteSnippets</code> 中找到名字为 <code class=\"language-text\">ad-reject</code> 的规则，将该规则设置为 <strong>拒绝</strong>(<code class=\"language-text\">REJECT</code>) 状态，这样符合该规则的请求就会被拦截，从而达到去除广告的效果。</p>\n<p>最开始的需求基本配置完毕，接下来我们需要将多个机场订阅和一些单独的节点合并生成一个 Clash 配置文件，并且其中需要包含刚刚配置的规则。</p>\n<br/>\n<h2>导出配置</h2>\n<p>这一部分需要回到 <code class=\"language-text\">surgio.conf.js</code> 中进行修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">artifacts: [\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   // 省略一些内容\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   /**\n<span class=\"token prefix unchanged\"> </span>    * Clash\n<span class=\"token prefix unchanged\"> </span>    */\n<span class=\"token prefix unchanged\"> </span>   { \n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>     // 该导出文件包含 Clash(V2Ray)\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>     name: 'Clash.yaml',\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>     name: 'clash_v2.yaml',\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>     template: 'clash',\n<span class=\"token prefix unchanged\"> </span>     provider: 'subscribe_demo',   // 对应 provider 中的 subscribe_demo.js\n<span class=\"token prefix unchanged\"> </span>   },\n<span class=\"token prefix unchanged\"> </span>   { \n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>     // 该导出文件包含 Clash(SSR)\n</span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span>     name: 'Clash_custom_dns.yaml',\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>     name: 'clash_ssr.yaml',\n</span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>     template: 'clash',\n<span class=\"token prefix unchanged\"> </span>     provider: 'subscribe_demo_1', // 对应 provider 中的 subscribe_demo_1.js\n<span class=\"token prefix unchanged\"> </span>     customParams: {\n<span class=\"token prefix unchanged\"> </span>       dns: true,\n<span class=\"token prefix unchanged\"> </span>     }\n<span class=\"token prefix unchanged\"> </span>   },\n</span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span>   // 合并节点\n<span class=\"token prefix inserted\">+</span>   { \n<span class=\"token prefix inserted\">+</span>     // 该导出文件包含 Vmess + Clash(V2Ray) + Clash(SSR)\n<span class=\"token prefix inserted\">+</span>     name: 'clash_combine.yaml',\n<span class=\"token prefix inserted\">+</span>     template: 'clash',\n<span class=\"token prefix inserted\">+</span>     provider: 'demo',             // 对应 provider 中的 demo.js\n<span class=\"token prefix inserted\">+</span>     combineProviders: ['subscribe_demo', 'subscribe_demo_1'],\n<span class=\"token prefix inserted\">+</span>   },\n</span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span>   // 省略一些内容\n<span class=\"token prefix unchanged\"> </span> ],</span></code></pre></div>\n<br/>\n<h2>输出代理配置文件</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 切换到项目根目录</span>\n$ <span class=\"token builtin class-name\">cd</span> my-rule-store\n\n<span class=\"token comment\"># 生成配置文件</span>\n$ npx surgio generate</code></pre></div>\n<p>执行成功后，会生成一个 <code class=\"language-text\">dist</code> 文件夹，其中应该包含：</p>\n<ul>\n<li>clash_v2.yaml</li>\n<li>clash_ssr.yaml</li>\n<li>clash_combine.yaml</li>\n</ul>\n<p>将 <code class=\"language-text\">clash_combine.yaml</code> 这个合并之后的 Clash 配置文件拷贝至 ClashX 的配置目录内，然后在 ClashX 中切换配置即可。</p>\n<br/>\n<p>按照上面的配置，可以实现本文一开始的需求。</p>\n<p>但是还是有以下可以优化的地方：</p>\n<ul>\n<li>每次修改规则配置后，需要重新拷贝配置文件至 ClashX 配置目录下。</li>\n<li>机场更新节点订阅后，需要重新生成配置文件。</li>\n<li>配置新机器的代理时，需要先在本地配置 Node 和 Surgio 环境。</li>\n</ul>\n<p>参考了官方文档，发现可以将 Surgio 部署到 SaaS 平台上，例如 Vercel 和 Heroku。</p>\n<p>那么就开始吧~</p>\n<br/>\n<h2>部署 Surgio API</h2>\n<p>本地直接部署至 Vercel 的方法请参考 <a href=\"https://surgio.js.org/guide/advance/api-gateway.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方文档：快速搭建托管 API</a> 。</p>\n<p>以下介绍的方法是我常用的流程，将本地项目提交至 GitHub，然后在 Vercel 引如 GitHub 项目并进行部署的方法，不过会略过一些常用操作。</p>\n<p>该流程方便后期随时随地在 GitHub 上编辑配置文件，并且 Vercel 自动化部署，无需本地再次配置环境。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 在项目根目录 `my-rule-store` 下安装 `Surgio Gateway`。</span>\n$ <span class=\"token builtin class-name\">cd</span> my-rule-store\n$ <span class=\"token function\">npm</span> i @surgio/gateway --save\n\n<span class=\"token comment\"># 创建 Vercel 配置文件</span>\n$ <span class=\"token function\">touch</span> vercel.json\n\n<span class=\"token comment\"># 创建 Surgio Gateway 配置文件</span>\n$ <span class=\"token function\">touch</span> gateway.js</code></pre></div>\n<p>在 <code class=\"language-text\">vercel.json</code> 文件中添加如下内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"public\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"builds\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> \n      <span class=\"token property\">\"src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/gateway.js\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"use\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@vercel/node\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"includeFiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">\"provider/**\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"template/**\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"*.js\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"*.json\"</span>\n        <span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"routes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"src\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/(.*)\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"dest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/gateway.js\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 <code class=\"language-text\">gateway.js</code> 文件中添加如下内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> gateway <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@surgio/gateway'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> gateway<span class=\"token punctuation\">.</span><span class=\"token function\">createHttpServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br/>\n<h3>配置接口鉴权（安全考虑，务必配置）</h3>\n<p>在 <code class=\"language-text\">surgio.conf.js</code> 添加如下内容</p>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\">module.exports = {\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span> gateway: {\n<span class=\"token prefix unchanged\"> </span>   auth: true,\n<span class=\"token prefix unchanged\"> </span>   accessToken: 'YOUR_PASSWORD',\n<span class=\"token prefix unchanged\"> </span> },\n</span>}</code></pre></div>\n<p>并将 <code class=\"language-text\">YOUR_PASSWORD</code> 进行随意替换。</p>\n<br/>\n<h3>提交至 GitHub</h3>\n<p>略</p>\n<br/>\n<h3>Vercel 部署</h3>\n<p>略</p>\n<hr>\n<p>略略略:p</p>","frontmatter":{"title":"Surgio上手教程——妥善管理你的机场订阅","date":"February 06, 2021","description":"有多个机场订阅想合并成一个？提供的分流规则自己不满意？这里或许可以帮到你~"}},"previous":null,"next":{"fields":{"slug":"/archives/getting-started-with-fitness/"},"frontmatter":{"title":"在疫情期间我坚持下来的事","slug":"getting-started-with-fitness"}}},"pageContext":{"id":"c101e5ea-657c-5034-aeca-81f8fa43bfc4","previousPostId":null,"nextPostId":"732ca6ad-b9f8-511a-a041-53c25c670234"}},"staticQueryHashes":["2841359383","916993862"]}